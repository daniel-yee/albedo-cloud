<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>viewComponentHtml</name>
    <filePath>src/views/${moduleName}/${subModuleName}/${className}</filePath>
    <fileName>index.vue</fileName>
    <content><![CDATA[
<template>
  <div class="app-container calendar-list-container">
    <basic-container>
    <div class="filter-container">
      <el-form :inline="true"  :model="search${ClassName}Form" ref="search${ClassName}Form" v-show="searchFilterVisible">
      <#list table.columnList as c>
      <#if c.query>
        <el-form-item label="${c.title}" prop="${c.javaFieldId}">
      <#if c.showType == "input" || c.showType == "textarea">
          <el-input class="filter-item input-normal" v-model="search${ClassName}Form.${c.javaFieldId}"></el-input>
      <#elseif c.showType == "select">
          <CrudSelect v-model="search${ClassName}Form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></CrudSelect>
      <#elseif c.showType == "checkbox">
          <CrudCheckbox v-model="search${ClassName}Form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></CrudCheckbox>
      <#elseif c.showType == "radio">
          <CrudRadio v-model="search${ClassName}Form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></CrudRadio>
      <#elseif c.showType == "dateselect">
          <el-date-picker v-model="search${ClassName}Form.${c.javaFieldId}" type="datetimerange"
            range-separator="至"
            start-placeholder="开始日期"
            end-placeholder="结束日期">
          </el-date-picker>
      </#if>
        </el-form-item>
      </#if>
      </#list>
        <el-form-item>
          <el-button size="small" type="primary" icon="el-icon-search" @click="handleFilter">查询</el-button>
          <el-button size="small" @click="searchReset" icon="el-icon-delete" >清空</el-button>
        </el-form-item>
      </el-form>
    </div>

    <!-- 表格功能列 -->
    <div class="table-menu">
      <div class="table-menu-left">
        <el-button-group>
          <el-button size="mini" v-if="${permissionPrefix}_edit" class="filter-item" @click="handleEdit" type="primary" icon="edit">添加</el-button>
        </el-button-group>
      </div>
      <div class="table-menu-right">
        <el-button icon="el-icon-search" circle size="mini" @click="searchFilterVisible= !searchFilterVisible"></el-button>
      </div>
    </div>
    <el-table :key='tableKey' @sort-change="sortChange" :data="list" v-loading="listLoading" element-loading-text="加载中..." fit highlight-current-row>
      <#list table.columnList as column>
      <#if column.list && column.simpleJavaField!="parentId" && column.simpleJavaField!="parentIds" && column.simpleJavaField!="parent">
      <el-table-column align="center" label="${column.title}">
        <template slot-scope="scope">
          <span>{{scope.row.${column.simpleJavaField}}}</span>
        </template>
      </el-table-column>
      </#if>
      </#list>
      <el-table-column align="center" fixed="right" label="操作" v-if="${permissionPrefix}_edit || ${permissionPrefix}_del">
        <template slot-scope="scope">
          <el-button v-if="${permissionPrefix}_edit" icon="icon-edit" title="编辑" type="text" @click="handleEdit(scope.row)">
          </el-button>
          <el-button v-if="${permissionPrefix}_del" icon="icon-delete" title="删除" type="text" @click="handleDelete(scope.row)">
          </el-button>
        </template>
      </el-table-column>

    </el-table>

    <div v-show="!listLoading" class="pagination-container">
      <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page.sync="listQuery.page" :page-sizes="[10,20,30, 50]" :page-size="listQuery.size" layout="total, sizes, prev, pager, next, jumper" :total="total">
      </el-pagination>
    </div>
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form :model="form" ref="form" label-width="100px">
      <el-table-column type="index" fixed="left" width="60"></el-table-column>
      <#list table.columnList as c>
        <#if c.edit && (c.isNotBaseField || c.simpleJavaField == 'description')>
        <el-form-item label="${c.title}" prop="${c.javaFieldId}" :rules="[<#if !c.null>{required: true,message: '请输入${c.title}'},</#if><#if c.javaType == "Long" || c.javaType == "Integer">{validator:validateDigits},</#if><#if c.javaType == "java.math.BigDecimal" || c.javaType == "Double">{ validator:validateNumber},</#if><#if c.dataLength != "0" && c.javaType == "String">{min: 0,max: ${c.dataLength},message: '长度在 0 到 ${c.dataLength} 个字符'},</#if><#if c.unique && !c.pk>{validator:validateUnique}</#if>]">
            <#if c.showType == "input">
                <el-input v-model="form.${c.javaFieldId}"></el-input>
            <#elseif c.showType == "textarea">
                <el-input type="textarea" v-model="form.${c.javaFieldId}"></el-input>
            <#elseif c.showType == "select">
              <CrudSelect v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></CrudSelect>
            <#elseif c.showType == "checkbox">
              <CrudCheckbox v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></CrudCheckbox>
            <#elseif c.showType == "radio">
              <CrudRadio v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></CrudRadio>
            <#elseif c.showType == "dateselect">
              <el-date-picker v-model="form.${c.javaFieldId}" type="datetime" value-format="yyyy-MM-dd HH:mm:ss" >
              </el-date-picker>
           </#if>
        </el-form-item>
        </#if>
    </#list>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="cancel()">取 消</el-button>
        <el-button type="primary" @click="save()">保 存</el-button>
      </div>
    </el-dialog>
    </basic-container>
  </div>
</template>

<script>
import { page${ClassName}, find${ClassName}, save${ClassName}, remove${ClassName}, validateUnique${ClassName}} from "./service";
import { mapGetters } from "vuex";
import {isValidateUnique, isValidateNumber, isValidateDigits, objectToString, validateNull} from "@/util/validate";
import {parseJsonItemForm} from "@/util/util";
import CrudSelect from "@/views/avue/crud-select";
import CrudCheckbox from "@/views/avue/crud-checkbox";
import CrudRadio from "@/views/avue/crud-radio";

export default {
  name: "table_${permissionPrefix}",
  components: {CrudSelect, CrudCheckbox, CrudRadio},
  data() {
    return{
      searchFilterVisible: true,
      dialogFormVisible: false,
      list: null,
      total: null,
      listLoading: true,
      search${ClassName}Form:{},
      listQuery: {
        page: 1,
        size: 20
      },
      form: {
        <#list table.columnList as c>
        <#if c.edit && (c.isNotBaseField || c.simpleJavaField == 'description')>
        ${c.javaFieldId}: undefined,
        </#if>
        </#list>
      },
      validateUnique: (rule, value, callback) => {
          validateUnique${ClassName}(rule, value, callback, this.form.id)
        },
        validateNumber: (rule, value, callback) => {
          isValidateNumber(rule, value, callback)
        },
        validateDigits: (rule, value, callback) => {
          isValidateDigits(rule, value, callback)
        },
      <#list table.columnList as c>
        <#if c.dictType??&& c.dictType != ''>
      ${c.javaFieldId}Options: undefined,
        </#if>
       </#list>
      dialogStatus: 'create',
      textMap: {
        update: '编辑${functionNameSimple}',
        create: '创建${functionNameSimple}'
      },
      tableKey: 0
    };
  },
  computed: {
    ...mapGetters(["permissions","dicts"])
  },
  filters: {
  },
  created() {
    this.getList();
    this.${permissionPrefix}_edit = this.permissions["${permissionPrefix}_edit"];
    this.${permissionPrefix}_del = this.permissions["${permissionPrefix}_del"];
    <#assign index = 0 /><#list table.columnList as c><#if c.dictType?? && c.dictType != ''>
    this.${c.javaFieldId}Options = this.dicts["${c.dictType}"];
    <#assign index = index+1 />
    </#if></#list>
  },
  methods: {
    getList() {
      this.listLoading = true;
      this.listQuery.queryConditionJson = parseJsonItemForm([
      <#list table.columnList as c><#if c.query>
      {fieldName: '${c.javaFieldId}',value:this.search${ClassName}Form.${c.javaFieldId},operate:'${c.queryType}',attrType:'${c.javaType}'},
      </#if></#list>
      ])
      page${ClassName}(this.listQuery).then(response => {
        this.list = response.data.records;
        this.total = response.data.total;
        this.listLoading = false;
      });
    },
    sortChange(column){
      if(column.order=="ascending"){
        this.listQuery.ascs=column.prop
        this.listQuery.descs=undefined;
      }else{
        this.listQuery.descs=column.prop
        this.listQuery.ascs=undefined;
      }
      this.getList()
    },
    searchReset() {
      this.$refs['search${ClassName}Form'].resetFields();
    },
    handleFilter() {
      this.listQuery.page = 1;
      this.getList();
    },
    handleSizeChange(val) {
      this.listQuery.size = val;
      this.getList();
    },
    handleCurrentChange(val) {
      this.listQuery.page = val;
      this.getList();
    },
    handleEdit(row) {
      this.resetForm();
      this.dialogStatus = row && !validateNull(row.id)? "update" : "create";
      if(this.dialogStatus == "create"){
        this.dialogFormVisible = true;
      }else{
        find${ClassName}(row.id).then(response => {
            this.form = response.data;<#list table.columnList as c><#if c.dictType??&& c.dictType != ''>
            this.form.${c.javaFieldId}=objectToString(this.form.${c.javaFieldId});</#if></#list>
            this.dialogFormVisible = true;
          });
      }
    },
    cancel() {
      this.dialogFormVisible = false;
      this.$refs['form'].resetFields();
    },
    save() {
      const set = this.$refs;
      set['form'].validate(valid => {
        if (valid) {
          save${ClassName}(this.form).then((data) => {
            this.getList();
            this.cancel()
          });
        } else {
          return false;
        }
      });
    },
    handleDelete(row) {
      this.$confirm(
        "此操作将永久删除该${functionNameSimple}, 是否继续?",
        "提示",
        {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }
      ).then(() => {
        remove${ClassName}(row.id).then((data) => {
            this.getList();
          });
      });
    },
    resetForm() {
      this.form = {
        <#list table.columnList as c>
        <#if c.edit && (c.isNotBaseField || c.simpleJavaField == 'description')>
        ${c.javaFieldId}: "",
        </#if>
        </#list>
      };
      this.$refs['form']&&this.$refs['form'].resetFields();
    }
  }
};
</script>

]]>
    </content>
</template>
